==> Cloning from https://github.com/UmbraMagica/Umbra-dev
==> Checking out commit 8bd68f27c41b9866842222394fc3b0aa4f5c2ee5 in branch main
==> Using Node.js version 22.16.0 (default)
==> Docs on specifying a Node.js version: https://render.com/docs/node-version
==> Using Bun version 1.1.0 (default)
==> Docs on specifying a Bun version: https://render.com/docs/bun-version
==> Running build command '   npm install && npm run build'...
added 559 packages, and audited 560 packages in 8s
75 packages are looking for funding
  run `npm fund` for details
9 vulnerabilities (1 low, 7 moderate, 1 high)
To address issues that do not require attention, run:
  npm audit fix
To address all issues (including breaking changes), run:
  npm audit fix --force
Run `npm audit` for details.
> umbra-magica@1.0.0 build
> npm run build:client && npm run postbuild:client && npm run build:server
> umbra-magica@1.0.0 build:client
> cd client && npm install && npm run build
added 237 packages, and audited 238 packages in 4s
43 packages are looking for funding
  run `npm fund` for details
3 vulnerabilities (1 low, 2 moderate)
To address all issues, run:
  npm audit fix
Run `npm audit` for details.
> client@1.0.0 build
> vite build
The CJS build of Vite's Node API is deprecated. See https://vitejs.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.
vite v5.2.10 building for production...
transforming...
âœ“ 2736 modules transformed.
rendering chunks...
computing gzip size...
dist/index.html                   0.52 kB â”‚ gzip:   0.35 kB
dist/assets/index-XtQLgoQR.css   90.58 kB â”‚ gzip:  15.36 kB
dist/assets/index-DO5yE8xf.js   908.18 kB â”‚ gzip: 247.79 kB
(!) Some chunks are larger than 500 kB after minification. Consider:
- Using dynamic import() to code-split the application
- Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/configuration-options/#output-manualchunks
- Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.
âœ“ built in 5.39s
> umbra-magica@1.0.0 postbuild:client
> rm -rf dist/public && mkdir -p dist/public && cp -r client/dist/* dist/public/
> umbra-magica@1.0.0 postbuild:client
> rm -rf dist/public && mkdir -p dist/public && cp -r client/dist/* dist/public/
> umbra-magica@1.0.0 build:server
> esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist
  dist/index.js  139.2kb
âš¡ Done in 14ms
==> Uploading build...
==> Uploaded in 6.3s. Compression took 4.5s
==> Build successful ðŸŽ‰
==> Deploying...
==> No open ports detected, continuing to scan...
==> Docs on specifying a port: https://render.com/docs/web-services#port-binding
==> Running '   npm start'
> umbra-magica@1.0.0 start
> cross-env NODE_ENV=production node dist/index.js
==> Exited with status 1
[SUPABASE] Initializing client with: {
  hasUrl: true,
  hasKey: false,
  url: 'https://mzwbvzrkyjooegttklcq.s...'
}
Missing Supabase configuration
==> Common ways to troubleshoot your deploy: https://render.com/docs/troubleshooting-deploys
==> Running '   npm start'
> umbra-magica@1.0.0 start
> cross-env NODE_ENV=production node dist/index.js
[SUPABASE] Initializing client with: {
  hasUrl: true,
  hasKey: false,
  url: 'https://mzwbvzrkyjooegttklcq.s...'
}
Missing Supabase configuration